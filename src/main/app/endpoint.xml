<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
    
	<flow name="reportingFlow">
		<http:listener config-ref="InchcapeHttpListenerConfiguration"
			path="/batch/report" allowedMethods="GET" doc:name="GET reporting batch" />
		<flow-ref name="leh-common-request-preprocess-subflow" doc:name="leh-common-request-preprocess-subflow"/> 
			<flow-ref name="leh-common-service-log-start-subflow" doc:name="leh-common-service-log-start-subflow"/>
		<choice doc:name="report batch">
			<when expression="#[message.inboundProperties.'http.query.params'.account]">
				<expression-component doc:name="Invoke or get reporting Account Logs" ><![CDATA[payload;]]></expression-component>
			</when>
			<when expression="#[message.inboundProperties.'http.query.params'.vehicle]">
				<expression-component doc:name="Invoke or get reporting Vehicle Logs" ><![CDATA[payload;]]></expression-component>
			</when>
			<when
				expression="#[message.inboundProperties.'http.query.params'.vehicleassociation]">
				<expression-component
					doc:name="Invoke or get reporting VehicleAssociation Logs" ><![CDATA[payload;]]></expression-component>
			</when>
			<otherwise>
                <expression-component doc:name="Not Logs"><![CDATA[app.name;]]></expression-component>
			</otherwise>
		</choice>
		<set-payload value="#[payload]" doc:name="Reporting Log" />
        <flow-ref name="leh-common-service-log-complete-subflow" doc:name="leh-common-service-log-complete-subflow"/>
		<exception-strategy ref="global-exception-strategy"
			doc:name="Reference Exception Strategy" />
	</flow>
	
	<flow name="settingFlow">
		<http:listener config-ref="InchcapeHttpListenerConfiguration"
			path="/batch/setting" allowedMethods="POST" doc:name="POST settings" />
		<flow-ref name="leh-common-request-preprocess-subflow" doc:name="leh-common-request-preprocess-subflow"/> 
			<flow-ref name="leh-common-service-log-start-subflow" doc:name="leh-common-service-log-start-subflow"/>
        <dw:transform-message doc:name="Payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <validation:all doc:name="RequiredParameters">
            <validation:validations>
                <validation:is-not-empty value="#[payload.object]" message="object is required" exceptionClass="java.lang.IllegalArgumentException"/>
                <validation:is-not-empty value="#[payload.business]" message="business is required" exceptionClass="java.lang.IllegalArgumentException"/>
                <validation:is-not-empty value="#[payload.country]" message="country is required" exceptionClass="java.lang.IllegalArgumentException"/>
            	<validation:is-not-empty value="#[payload.schedule.poll.cron.dayOfMonth]"  message="It is required dayOfMonth" exceptionClass="java.lang.IllegalArgumentException"/>
                <validation:is-not-empty value="#[payload.schedule.poll.cron.dayOfWeek]"  message="It is required dayOfWeek" exceptionClass="java.lang.IllegalArgumentException"/>
                <validation:is-false expression="#[payload.schedule.poll.cron.dayOfWeek == '?' &amp;&amp; payload.schedule.poll.cron.dayOfMonth == '?']" message="Do not allowed same value" exceptionClass="java.lang.IllegalArgumentException"/>
                <validation:is-false expression="#[payload.schedule.poll.cron.dayOfWeek == '*' &amp;&amp; payload.schedule.poll.cron.dayOfMonth == '*']" message="Do not allowed same value" exceptionClass="java.lang.IllegalArgumentException"/>
            </validation:validations>
        </validation:all>
        <dw:transform-message doc:name="MapPropertiesConfiguration">
			<dw:set-payload ><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
            <dw:set-property propertyName="object"><![CDATA[%dw 1.0
%output application/java
---
payload.object]]></dw:set-property>
            <dw:set-property propertyName="country"><![CDATA[%dw 1.0
%output application/java
---
payload.country]]></dw:set-property>
            <dw:set-property propertyName="business"><![CDATA[%dw 1.0
%output application/java
---
payload.business]]></dw:set-property>
            <dw:set-property propertyName="timestandard"><![CDATA[%dw 1.0
%output application/java
---
payload.schedule.poll.timestandard]]></dw:set-property>
            <dw:set-property propertyName="inputPath"><![CDATA[%dw 1.0
%output application/java
---
"//input/" ++ payload.country ++ "/" ++ payload.business ++ "/" ++ payload.object]]></dw:set-property>
            <dw:set-property propertyName="outputPath"><![CDATA[%dw 1.0
%output application/java
---
"//output/" ++ payload.country ++ "/" ++ payload.business ++ "/" ++ payload.object]]></dw:set-property>
            <dw:set-property propertyName="errorPath"><![CDATA[%dw 1.0
%output application/java
---
"//error/" ++ payload.country ++ "/" ++ payload.business ++ "/" ++ payload.object]]></dw:set-property>
            <dw:set-property propertyName="archivePath"><![CDATA[%dw 1.0
%output application/java
---
"//archive/" ++ payload.country ++ "/" ++ payload.business ++ "/" ++ payload.object]]></dw:set-property>

            <dw:set-property propertyName="seconds"><![CDATA[%dw 1.0
%output application/java
---
payload.schedule.poll.cron.seconds as :string when payload.schedule.poll.cron.seconds? otherwise p('commoncronexpression')]]></dw:set-property>

            <dw:set-property propertyName="minutes"><![CDATA[%dw 1.0
%output application/java
---
payload.schedule.poll.cron.minutes as :string when payload.schedule.poll.cron.minutes? otherwise p('commoncronexpression')]]></dw:set-property>

            <dw:set-property propertyName="hours"><![CDATA[%dw 1.0
%output application/java
---
payload.schedule.poll.cron.hours as :string when payload.schedule.poll.cron.hours? otherwise p('commoncronexpression')]]></dw:set-property>

            <dw:set-property propertyName="dayOfMonth"><![CDATA[%dw 1.0
%output application/java
---
payload.schedule.poll.cron.dayOfMonth as :string when payload.schedule.poll.cron.dayOfWeek == "?" otherwise p('commondayofweekmonth')]]></dw:set-property>

            <dw:set-property propertyName="month"><![CDATA[%dw 1.0
%output application/java
---
payload.schedule.poll.cron.month as :string when payload.schedule.poll.cron.month? otherwise "*"]]></dw:set-property>


            <dw:set-property propertyName="dayOfWeek"><![CDATA[%dw 1.0
%output application/java
---
payload.schedule.poll.cron.dayOfWeek as :string when payload.schedule.poll.cron.dayOfMonth == "?" otherwise p('commondayofweekmonth')]]></dw:set-property>


            <dw:set-property propertyName="year"><![CDATA[%dw 1.0
%output application/java
---
payload.schedule.poll.cron.year as :string when payload.schedule.poll.cron.year? otherwise p('commoncronexpression')]]></dw:set-property>


            <dw:set-property propertyName="cronexpression"><![CDATA[%dw 1.0
%output application/java
---
outboundProperties.seconds ++ " " ++ 
outboundProperties.minutes ++ " " ++ 
outboundProperties.hours ++ " " ++ 
outboundProperties.dayOfMonth ++ " " ++ 
outboundProperties.month ++ " " ++ 
outboundProperties.dayOfWeek ++ " " ++ 
outboundProperties.year ]]></dw:set-property>


            <dw:set-property propertyName="frequencyMilliseconds"><![CDATA[%dw 1.0
%output application/java
---
payload.reconnectionStrategyTargetSystem.frequencyMilliseconds as :string when payload.reconnectionStrategyTargetSystem.frequencyMilliseconds? otherwise p("reconnection.frequencyMilliseconds") as :string]]></dw:set-property>
            <dw:set-property propertyName="attempts"><![CDATA[%dw 1.0
%output application/java
---
payload.reconnectionStrategyTargetSystem.attempts as :string when payload.reconnectionStrategyTargetSystem.attempts? otherwise p("reconnection.attempts") as :string]]></dw:set-property>
            <dw:set-property propertyName="connectorName"><![CDATA[%dw 1.0
%output application/java
---
"sftp" ++ payload.country ++ payload.business ++ payload.object]]></dw:set-property>
            <dw:set-property propertyName="maxFailedRecords"><![CDATA[%dw 1.0
%output application/java
---
payload.maxFailedRecords as :string when payload.maxFailedRecords? otherwise p("batch.max.failed.records") as :string]]></dw:set-property>
        </dw:transform-message>
        <set-payload value="#[payload]" doc:name="Set Payload"/>

        <!-- <component class="com.inchcape.util.DynamicPropertySetter" doc:name="DynamicPropertySetter"/>
        <component class="com.inchcape.util.DynamicQuartzGenerator" doc:name="DynamicQuartzGenerator"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/> -->
        <flow-ref name="leh-common-service-log-complete-subflow" doc:name="leh-common-service-log-complete-subflow"/>
		<exception-strategy ref="global-exception-strategy"
			doc:name="Reference Exception Strategy" />
	</flow>
	
	<!-- <flow name="vehicle_scheduler">
        <poll doc:name="Poll">
            <schedulers:cron-scheduler expression="0 30 1 * * ?" timeZone="Europe/London"/>
            <watermark variable="lastVehicleCSV" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.lastModifiedDate]"/>
            <sftp:outbound-endpoint responseTimeout="10000" ref="sftpInboundProperties" doc:name="SFTP Vehicle Files">
                <file:filename-wildcard-filter pattern="*vehicle*.txt,*vehicle*.csv" caseSensitive="false"/>
            </sftp:outbound-endpoint>
        </poll>
			
		<dw:transform-message doc:name="ListIterator">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java

payload]]></dw:set-payload>
		</dw:transform-message>
		<flow-ref name="leh-common-request-preprocess-subflow" doc:name="leh-common-request-preprocess-subflow"/> 
		<flow-ref name="leh-common-trans-log-start-subflow" doc:name="leh-common-trans-log-start-subflow"/>
		<choice doc:name="lock policy">
			<when expression="#['poll' == '${trigger.policy}']">
				<expression-component doc:name="lock vehicle batch interface"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
				<batch:execute name="vehicle" doc:name="vehicle" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>
		<exception-strategy ref="global-exception-strategy"
			doc:name="Reference Exception Strategy" />
	</flow> -->
	<!-- <flow name="vehicleassociation_scheduler">
        <poll doc:name="Poll">
            <schedulers:cron-scheduler expression="0 0 2 * * ?" timeZone="Europe/London"/>
            <watermark variable="lastVehicleAssociationCSV" default-expression="${watermark.default.expression}" selector="MAX" selector-expression="#[payload.lastModifiedDate]"/>
            <sftp:outbound-endpoint responseTimeout="10000" ref="sftpInboundProperties" doc:name="SFTP VehicleAssociation Files">
                <file:filename-wildcard-filter pattern="*vehicleassociation*.txt,*vehicleassociation*.csv" caseSensitive="false"/>
            </sftp:outbound-endpoint>
        </poll>
		
		<dw:transform-message doc:name="ListIterator">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java

payload]]></dw:set-payload>
		</dw:transform-message>
		<flow-ref name="leh-common-request-preprocess-subflow" doc:name="leh-common-request-preprocess-subflow"/> 
		<flow-ref name="leh-common-trans-log-start-subflow" doc:name="leh-common-trans-log-start-subflow"/>
		<choice doc:name="lock policy">
			<when expression="#['poll' == '${trigger.policy}']">
				<expression-component doc:name="lock vehicleassociation batch interface"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
				<batch:execute name="vehicleassociation" doc:name="vehicleassociation" />
			</when>
			<otherwise>
				<logger level="INFO" doc:name="Logger" />
			</otherwise>
		</choice>
		<exception-strategy ref="global-exception-strategy"
			doc:name="Reference Exception Strategy" />
	</flow> -->

	

</mule>
