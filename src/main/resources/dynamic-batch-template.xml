<?xml version="1.0" encoding="UTF-8"?>
 
<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:secure-property-placeholder="http://www.mulesoft.org/schema/mule/secure-property-placeholder" xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:schedulers="http://www.mulesoft.org/schema/mule/schedulers" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" 
xmlns:http="http://www.mulesoft.org/schema/mule/http" 
xmlns:jms="http://www.mulesoft.org/schema/mule/jms" 
xmlns:context="http://www.springframework.org/schema/context" 
xmlns:vm="http://www.mulesoft.org/schema/mule/vm" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
        xmlns:spring="http://www.springframework.org/schema/beans" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/schedulers http://www.mulesoft.org/schema/mule/schedulers/current/mule-schedulers.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd
http://www.mulesoft.org/schema/mule/secure-property-placeholder http://www.mulesoft.org/schema/mule/secure-property-placeholder/current/mule-secure-property-placeholder.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	
	
	<spring:beans>
		<!-- Import LEH resources -->
		<spring:import resource="classpath:leh-common-request-preprocess.xml"/> 
		<spring:import resource="classpath:leh-common-transaction-log-flow.xml"/> 
		<spring:import resource="classpath:error-handling.xml" />
	</spring:beans>
	
	<anypoint-mq:config name="AMQConfiguration" clientMode="ASYNC" doc:name="Anypoint MQ Configuration"> 
        <anypoint-mq:provider url="${anypointmq.url}" clientId="${anypointmq.client.id}" clientSecret="${anypointmq.client.secret}"/>
    </anypoint-mq:config>
    
    <secure-property-placeholder:config name="Dynamic_Secure_Property_Placeholder" key="${secure.key}" location="classpath:${env}.properties,common.properties" ignoreResourceNotFound="true" systemPropertiesMode="OVERRIDE" doc:name="Secure Property Placeholder"/>
    <http:request-config name="targetSystemAPI_Request_Configuration" host="${http.targetsystemapi.host}" port="${portTargetSystemAPI}" doc:name="HTTP Request Configuration"/>
    
    
        <flow name="input" initialState="stopped">
			<sftp:inbound-endpoint host="${sftp.host}" port="${sftp.port}" path="${sftp.input.country.business.object}" user="${sftp.username}" password="${sftp.password}"   responseTimeout="10000" name="SFTP" doc:name="SFTP" fileAge="${sftp.file.age}">
                <file:filename-wildcard-filter pattern="*.csv" caseSensitive="false"/>
                <reconnect blocking="false" frequency="${sftp.frequency.country.business.object}" count="${sftp.attempts.country.business.object}"/>
            </sftp:inbound-endpoint>
        <object-to-byte-array-transformer doc:name="Object to Byte Array"/>
        <expression-component doc:name="fileNameOutput"><![CDATA[message.outboundProperties.fileOutput=org.apache.commons.io.FilenameUtils.getBaseName(message.inboundProperties.originalFilename)+ server.dateTime.withTimeZone('UTC').format("ddMMyyyyHHmmss");]]></expression-component>
        <sftp:outbound-endpoint exchange-pattern="one-way" outputPattern="#[message.outboundProperties.fileOutput]#['.csv']" host="${sftp.host}" port="${sftp.port}" path="${sftp.output.country.business.object}" user="${sftp.username}" password="${sftp.password}" responseTimeout="10000" doc:name="output"/>

        <dw:transform-message doc:name="Collection">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        
         <batch:execute name="batch" doc:name="batch"/>
        <expression-component doc:name="stop flow"><![CDATA[app.registry.'input'.stop();]]></expression-component>
        <exception-strategy ref="global-exception-strategy" doc:name="Reference Exception Strategy"/>
	</flow>

	
     <batch:job name="batch" max-failed-records="${batch.max.failed.records}">
        <batch:process-records>
            <batch:step name="Queue-TargetSystem">
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <set-variable variableName="originalMessage" value="#[payload]" doc:name="originalMessage"/>
                <set-variable variableName="correlationId" value="#[java.util.UUID.randomUUID().toString()]" doc:name="correlationId"/>
                <set-variable variableName="exchange" value="${exchangeName}" doc:name="exchange"/>
                <set-variable variableName="queue" value="${queueName}" doc:name="queue"/>
                <message-properties-transformer doc:name="Message Properties">
                    <add-message-property key="messageId" value="#[flowVars.correlationId]"/>
                </message-properties-transformer>
                <set-variable variableName="targetSystemAPI" value="${pathTargetSystemAPI}" doc:name="targetSystemAPI"/>
                <logger message="CorrelationId: #[flowVars.correlationId] Queue: #[flowVars.queue]" level="INFO" doc:name="Logger"/>
                <anypoint-mq:publish config-ref="AMQConfiguration" destination="#[flowVars.exchange]" doc:name="Publish Exchange">
                    <anypoint-mq:message-builder messageId="#[message.outboundProperties.messageId]"/>
                </anypoint-mq:publish>
               <http:request config-ref="targetSystemAPI_Request_Configuration" path="#[flowVars.targetSystemAPI]" method="POST" doc:name="HTTP">
                    <http:success-status-code-validator values="200..399"/>
                </http:request>
                <logger message="HTTP STATUS: #[message.inboundProperties['http.status']], #[message.outboundProperties['http.status']]" level="INFO" doc:name="Logger"/>
                <choice doc:name="response 200?">
                    <when expression="#[message.inboundProperties['http.status'] == '200']">
                        <message-properties-transformer doc:name="Message Properties">
                            <add-message-property key="messageId" value="#[flowVars.correlationId]"/>
                        </message-properties-transformer>
                        <anypoint-mq:consume config-ref="AMQConfiguration" destination="#[flowVars.queue]" doc:name="Consume From Queue"/>
                    </when>
                    <otherwise>
                        <message-properties-transformer doc:name="Message Properties">
                            <add-message-property key="messageId" value="#[flowVars.correlationId]"/>
                        </message-properties-transformer>
                        <anypoint-mq:consume config-ref="AMQConfiguration" destination="#[flowVars.queue]" doc:name="Consume From Queue"/>
                        <set-payload value="#[flowVars.originalMessage]" doc:name="Message"/>
                        <json:object-to-json-transformer doc:name="Object to JSON"/>
                        <anypoint-mq:publish config-ref="AMQConfiguration" destination="error-queue" doc:name="Publish To Error-Queue">
                            <anypoint-mq:message-builder messageId="#[flowVars.correlationId]"/>
                        </anypoint-mq:publish>
                    </otherwise>
                </choice>
                
            </batch:step>

            <!-- <batch:step name="Failures" accept-policy="ONLY_FAILURES" accept-expression="#[message.outboundProperties.correlationId!=null]">
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                <anypoint-mq:publish config-ref="AMQConfiguration" destination="error-queue" doc:name="Error Queue">
                    <anypoint-mq:message-builder messageId="#[message.outboundProperties.'correlationId']"/>
                </anypoint-mq:publish>
            </batch:step> -->
        </batch:process-records>
        <batch:on-complete>
            <json:object-to-json-transformer doc:name="Object to JSON"/>
            <logger message="#[message]" level="INFO" doc:name="Logger"/>
        </batch:on-complete>
    </batch:job> 

</mule>